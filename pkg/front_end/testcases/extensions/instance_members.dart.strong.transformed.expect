library;
import self as self;
import "dart:core" as core;

class A1 extends core::Object {
  synthetic constructor •() → self::A1*
    : super core::Object::•()
    ;
}
class B1<T extends core::Object* = dynamic> extends core::Object {
  synthetic constructor •() → self::B1<self::B1::T*>*
    : super core::Object::•()
    ;
}
extension A2 on self::A1* {
  method method1 = self::A2|method1;
  method method2 = self::A2|method2;
  method method3 = self::A2|method3;
  method method4 = self::A2|method4;
}
extension B2<T extends core::Object* = dynamic> on self::B1<T*>* {
  method method1 = self::B2|method1;
  method method2 = self::B2|method2;
}
method A2|method1(final self::A1* #this) → self::A1* {
  return #this;
}
method A2|method2<T extends core::Object* = dynamic>(final self::A1* #this, self::A2|method2::T* o) → self::A1* {
  core::print(o);
  return #this;
}
method A2|method3<T extends core::Object* = dynamic>(final self::A1* #this = #C1, [self::A2|method3::T* o = #C1]) → self::A1* {
  core::print(o);
  return #this;
}
method A2|method4<T extends core::Object* = dynamic>(final self::A1* #this = #C1, {self::A2|method4::T* o = #C1}) → self::A1* {
  core::print(o);
  return #this;
}
method B2|method1<#T extends core::Object* = dynamic>(final self::B1<self::B2|method1::#T*>* #this) → self::B1<self::B2|method1::#T*>* {
  return #this;
}
method B2|method2<#T extends core::Object* = dynamic, S extends core::Object* = dynamic>(final self::B1<self::B2|method2::#T*>* #this, self::B2|method2::S* o) → self::B1<self::B2|method2::#T*>* {
  core::print(o);
  return #this;
}
static method main() → dynamic {}

constants  {
  #C1 = null
}
