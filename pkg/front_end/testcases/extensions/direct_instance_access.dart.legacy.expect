library;
//
// Problems in library:
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:9:1: Error: This requires the 'extension-methods' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// extension Extension on Class {
// ^^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:9:24: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
// extension Extension on Class {
//                        ^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:9:24: Error: 'Class' is already declared in this scope.
// extension Extension on Class {
//                        ^^^^^
// pkg/front_end/testcases/extensions/direct_instance_access.dart:5:7: Context: Previous declaration of 'Class'.
// class Class {
//       ^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:73:11: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
// extension GenericExtension<T> on GenericClass<T> {
//           ^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:73:31: Error: Expected '{' before this.
// extension GenericExtension<T> on GenericClass<T> {
//                               ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:73:34: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
// extension GenericExtension<T> on GenericClass<T> {
//                                  ^^^^^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:73:34: Error: 'GenericClass' is already declared in this scope.
// extension GenericExtension<T> on GenericClass<T> {
//                                  ^^^^^^^^^^^^
// pkg/front_end/testcases/extensions/direct_instance_access.dart:69:7: Context: Previous declaration of 'GenericClass'.
// class GenericClass<T> {
//       ^^^^^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:9:1: Warning: Type 'extension' not found.
// extension Extension on Class {
// ^^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:9:21: Warning: Type 'on' not found.
// extension Extension on Class {
//                     ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:73:1: Warning: Type 'extension' not found.
// extension GenericExtension<T> on GenericClass<T> {
// ^^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:73:31: Warning: Type 'on' not found.
// extension GenericExtension<T> on GenericClass<T> {
//                               ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:9:1: Warning: 'extension' isn't a type.
// extension Extension on Class {
// ^^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:11:12: Warning: Getter not found: 'property'.
//     return property;
//            ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:15:5: Warning: Setter not found: 'property'.
//     property = value;
//     ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:19:5: Warning: Setter not found: 'property'.
//     property = value;
//     ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:23:5: Warning: Setter not found: 'property'.
//     property = value;
//     ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:26:3: Error: Expected ';' after this.
//   get tearOffGetterNoArgs => readGetter;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:26:3: Warning: Getter not found: 'get'.
//   get tearOffGetterNoArgs => readGetter;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:26:27: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterNoArgs => readGetter;
//                           ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:27:3: Error: Expected ';' after this.
//   get tearOffGetterRequired => writeSetterRequired;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:27:3: Warning: Getter not found: 'get'.
//   get tearOffGetterRequired => writeSetterRequired;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:27:29: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterRequired => writeSetterRequired;
//                             ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:28:3: Error: Expected ';' after this.
//   get tearOffGetterOptional => writeSetterOptional;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:28:3: Warning: Getter not found: 'get'.
//   get tearOffGetterOptional => writeSetterOptional;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:28:29: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterOptional => writeSetterOptional;
//                             ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:29:3: Error: Expected ';' after this.
//   get tearOffGetterNamed => writeSetterNamed;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:29:3: Warning: Getter not found: 'get'.
//   get tearOffGetterNamed => writeSetterNamed;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:29:26: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterNamed => writeSetterNamed;
//                          ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:31:3: Error: Expected ';' after this.
//   get property => this.field;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:31:3: Warning: Getter not found: 'get'.
//   get property => this.field;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:31:7: Error: Can't declare 'property' because it was already used in this scope.
//   get property => this.field;
//       ^^^^^^^^
// pkg/front_end/testcases/extensions/direct_instance_access.dart:11:12: Context: Previous use of 'property'.
//     return property;
//            ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:31:16: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get property => this.field;
//                ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:31:19: Error: Expected identifier, but got 'this'.
//   get property => this.field;
//                   ^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:33:3: Error: Unexpected token 'set'.
//   set property(value) {
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:33:7: Error: Can't declare 'property' because it was already used in this scope.
//   set property(value) {
//       ^^^^^^^^
// pkg/front_end/testcases/extensions/direct_instance_access.dart:11:12: Context: Previous use of 'property'.
//     return property;
//            ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:34:5: Error: Expected identifier, but got 'this'.
//     this.field = value;
//     ^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:75:12: Warning: Getter not found: 'property'.
//     return property;
//            ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:79:5: Warning: Setter not found: 'property'.
//     property = value;
//     ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:83:4: Warning: Setter not found: 'property'.
//    property = value;
//    ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:87:5: Warning: Setter not found: 'property'.
//     property = value;
//     ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:91:4: Warning: Setter not found: 'property'.
//    property = value;
//    ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:95:5: Warning: Setter not found: 'property'.
//     property = value;
//     ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:99:4: Warning: Setter not found: 'property'.
//    property = value;
//    ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:102:5: Error: Expected ';' after this.
//   T get property => this.field;
//     ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:102:9: Error: Can't declare 'property' because it was already used in this scope.
//   T get property => this.field;
//         ^^^^^^^^
// pkg/front_end/testcases/extensions/direct_instance_access.dart:75:12: Context: Previous use of 'property'.
//     return property;
//            ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:102:18: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   T get property => this.field;
//                  ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:102:21: Error: Expected identifier, but got 'this'.
//   T get property => this.field;
//                     ^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:104:8: Error: Expected ';' after this.
//   void set property(T value) {
//        ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:104:12: Error: Can't declare 'property' because it was already used in this scope.
//   void set property(T value) {
//            ^^^^^^^^
// pkg/front_end/testcases/extensions/direct_instance_access.dart:75:12: Context: Previous use of 'property'.
//     return property;
//            ^^^^^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:105:5: Error: Expected identifier, but got 'this'.
//     this.field = value;
//     ^^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:108:3: Error: Expected ';' after this.
//   get tearOffGetterNoArgs => readGetter;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:108:27: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterNoArgs => readGetter;
//                           ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:109:3: Error: Expected ';' after this.
//   get tearOffGetterRequired => writeSetterRequired;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:109:29: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterRequired => writeSetterRequired;
//                             ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:110:3: Error: Expected ';' after this.
//   get tearOffGetterOptional => writeSetterOptional;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:110:29: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterOptional => writeSetterOptional;
//                             ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:111:3: Error: Expected ';' after this.
//   get tearOffGetterNamed => writeSetterNamed;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:111:26: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterNamed => writeSetterNamed;
//                          ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:112:3: Error: Expected ';' after this.
//   get tearOffGetterGenericRequired => genericWriteSetterRequired;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:112:36: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterGenericRequired => genericWriteSetterRequired;
//                                    ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:113:3: Error: Expected ';' after this.
//   get tearOffGetterGenericOptional => genericWriteSetterOptional;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:113:36: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterGenericOptional => genericWriteSetterOptional;
//                                    ^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:114:3: Error: Expected ';' after this.
//   get tearOffGetterGenericNamed => genericWriteSetterNamed;
//   ^^^
//
// pkg/front_end/testcases/extensions/direct_instance_access.dart:114:33: Error: A function declaration needs an explicit list of parameters.
// Try adding a parameter list to the function declaration.
//   get tearOffGetterGenericNamed => genericWriteSetterNamed;
//                                 ^^
//
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  field dynamic field = null;
  synthetic constructor •() → self::Class*
    : super core::Object::•()
    ;
}
class GenericClass<T extends core::Object* = dynamic> extends core::Object {
  generic-covariant-impl field self::GenericClass::T* field = null;
  synthetic constructor •() → self::GenericClass<self::GenericClass::T*>*
    : super core::Object::•()
    ;
}
static field invalid-type Extension;
static method GenericExtension<T extends core::Object* = dynamic>() → invalid-type {}
static method main() → dynamic {}
