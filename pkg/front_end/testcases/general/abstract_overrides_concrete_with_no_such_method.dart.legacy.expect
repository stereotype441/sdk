library;
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
  method foo() → self::A
    return null;
}
abstract class B extends self::A {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
  abstract method foo() → self::B;
}
class C extends core::Object {
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation _) → dynamic
    return null;
}
class D extends self::C implements self::B {
  synthetic constructor •() → self::D
    : super self::C::•()
    ;
  no-such-method-forwarder method foo() → self::B
    return this.{self::C::noSuchMethod}(new core::_InvocationMirror::_withType(#foo, 0, const <core::Type>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{}))) as{TypeError} self::B;
}
static method main() → dynamic {}
