library;
//
// Problems in library:
//
// pkg/front_end/testcases/nnbd/required.dart:5:29: Error: Expected '}' before this.
// method({int a, required int b, required final int c}) {}
//                             ^
//
// pkg/front_end/testcases/nnbd/required.dart:8:31: Error: Expected '}' before this.
//   method({int a, required int b, required final int c, required covariant final int d}) {}
//                               ^
//
// pkg/front_end/testcases/nnbd/required.dart:12:50: Error: Expected '}' before this.
// typedef Typedef1 = Function({int a, required int b});
//                                                  ^
//
// pkg/front_end/testcases/nnbd/required.dart:14:39: Error: Expected '}' before this.
// typedef Typedef2({int a, required int b});
//                                       ^
//
// pkg/front_end/testcases/nnbd/required.dart:16:31: Error: Expected '}' before this.
// Function({int a, required int b}) field;
//                               ^
//
// pkg/front_end/testcases/nnbd/required.dart:5:16: Warning: Type 'required' not found.
// method({int a, required int b, required final int c}) {}
//                ^^^^^^^^
//
// pkg/front_end/testcases/nnbd/required.dart:8:18: Warning: Type 'required' not found.
//   method({int a, required int b, required final int c, required covariant final int d}) {}
//                  ^^^^^^^^
//
// pkg/front_end/testcases/nnbd/required.dart:12:37: Warning: Type 'required' not found.
// typedef Typedef1 = Function({int a, required int b});
//                                     ^^^^^^^^
//
// pkg/front_end/testcases/nnbd/required.dart:14:26: Warning: Type 'required' not found.
// typedef Typedef2({int a, required int b});
//                          ^^^^^^^^
//
// pkg/front_end/testcases/nnbd/required.dart:16:18: Warning: Type 'required' not found.
// Function({int a, required int b}) field;
//                  ^^^^^^^^
//
import self as self;
import "dart:core" as core;

typedef Typedef1 = ({a: core::int*, int: invalid-type}) →* dynamic;
typedef Typedef2 = ({a: core::int*, int: invalid-type}) →* dynamic;
class Class extends core::Object {
  synthetic constructor •() → self::Class*
    ;
  method method({core::int* a, invalid-type int}) → dynamic
    ;
}
static field ({a: core::int*, int: invalid-type}) →* dynamic field;
static method method({core::int* a, invalid-type int}) → dynamic
  ;
static method main() → dynamic
  ;
